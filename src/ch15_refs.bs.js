// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var TestUtils$Part2Workshop = require("./TestUtils.bs.js");

var x = {
  contents: 0
};

if (0 !== x.contents) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch15_refs.re",
          10,
          0
        ],
        Error: new Error()
      };
}

x.contents = x.contents + 1 | 0;

if (1 !== x.contents) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch15_refs.re",
          17,
          0
        ],
        Error: new Error()
      };
}

function factorialWithForLoop(n) {
  var result = 1;
  for(var i = 1; i <= n; ++i){
    result = Math.imul(result, i);
  }
  return result;
}

if (120 !== factorialWithForLoop(5)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch15_refs.re",
          32,
          0
        ],
        Error: new Error()
      };
}

function factorialWithWhileLoop(n) {
  var i = 1;
  var result = 1;
  while(i <= n) {
    result = Math.imul(result, i);
    i = i + 1 | 0;
  };
  return result;
}

if (120 !== factorialWithWhileLoop(5)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch15_refs.re",
          48,
          0
        ],
        Error: new Error()
      };
}

function minAndMax(nums) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch15_refs.re",
          59,
          24
        ],
        Error: new Error()
      };
}

TestUtils$Part2Workshop.runTests("Ch15_refs-Part2Workshop", (function (param) {
        TestUtils$Part2Workshop.test("should min and max", (function (param) {
                if (Caml_obj.caml_equal([
                        2,
                        9
                      ], minAndMax({
                            hd: 5,
                            tl: {
                              hd: 9,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 3,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }))) {
                  return ;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "ch15_refs.re",
                        65,
                        6
                      ],
                      Error: new Error()
                    };
              }));
        return TestUtils$Part2Workshop.test("should min and max", (function (param) {
                      if (Caml_obj.caml_equal([
                              7,
                              34
                            ], minAndMax({
                                  hd: 11,
                                  tl: {
                                    hd: 15,
                                    tl: {
                                      hd: 7,
                                      tl: {
                                        hd: 34,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }))) {
                        return ;
                      }
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "ch15_refs.re",
                              68,
                              6
                            ],
                            Error: new Error()
                          };
                    }));
      }));

exports.x = x;
exports.factorialWithForLoop = factorialWithForLoop;
exports.factorialWithWhileLoop = factorialWithWhileLoop;
exports.minAndMax = minAndMax;
/*  Not a pure module */
