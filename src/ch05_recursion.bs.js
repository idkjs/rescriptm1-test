// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var TestUtils$Part2Workshop = require("./TestUtils.bs.js");

function addEveryNumberUpTo(x) {
  if (x < 0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "ch05_recursion.re",
            10,
            2
          ],
          Error: new Error()
        };
  }
  if (x !== 0) {
    return x + addEveryNumberUpTo(x - 1 | 0) | 0;
  } else {
    return 0;
  }
}

function factorial(x) {
  if (x < 0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "ch05_recursion.re",
            22,
            2
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ch05_recursion.re",
          25,
          2
        ],
        Error: new Error()
      };
}

TestUtils$Part2Workshop.runTests("Ch05_recursion-Part2Workshop", (function (param) {
        TestUtils$Part2Workshop.test("should calculate factorial(0)", (function (param) {
                if (factorial(0) === 1) {
                  return ;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "ch05_recursion.re",
                        32,
                        6
                      ],
                      Error: new Error()
                    };
              }));
        TestUtils$Part2Workshop.test("should calculate factorial(5)", (function (param) {
                if (factorial(3) === 6) {
                  return ;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "ch05_recursion.re",
                        35,
                        6
                      ],
                      Error: new Error()
                    };
              }));
        return TestUtils$Part2Workshop.test("should calculate factorial(120)", (function (param) {
                      if (factorial(5) === 120) {
                        return ;
                      }
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "ch05_recursion.re",
                              38,
                              6
                            ],
                            Error: new Error()
                          };
                    }));
      }));

exports.addEveryNumberUpTo = addEveryNumberUpTo;
exports.factorial = factorial;
/*  Not a pure module */
